apply plugin: 'com.android.application'

apply plugin: 'com.vanniktech.android.apk.size'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.getkeepsafe.dexcount'

// Android Gradle Known issues: http://tools.android.com/knownissues

/*
 * android.gradleファイルを導入するにあたり, 下記をプロジェクトルートのbuild.gradleに追記すること.
 * 
 * buildscript {
 *     repositories {
 *         ...
 *         maven { url 'https://plugins.gradle.org/m2/' } // official gradle plugins
 *     }
 *     dependencies {
 * 
 *         ...
 * 
 *         // google error-prone
 *         classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'
 *
 *         // dex method count
 *         classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.3.1'
 *
 *         // apk size
 *         classpath 'com.vanniktech:gradle-android-apk-size-plugin:0.1.2'
 * 
 *         // check for plugin updates
 *         classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
 *     }
 */

/*
 * -------------------------------------------------------------------
 *   Javaコンパイルプロセス共通設定.
 * -------------------------------------------------------------------
 */

/*
 * Javaコンパイル全般.
 *   より厳格なJavaコンパイルを実行するには各compileArgsのコメントアウトを外す.
 *   see: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html
 * 
 * Javaコンパイルオプションの設定.
 *   see: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html
 */
tasks.withType(JavaCompile) {
    configure(options) {
        // compilerArgs << '-Xlint:all'        // Turn on all warnings
        // compilerArgs << '-Xlint:-options'   // Turn off 'missing' bootclasspath warning
        // compilerArgs << '-Xlint:-path'      // Turn off アーカイブ・ファイルの予期しない拡張子(aar)
        // compilerArgs << '-Werror'           // Turn warnings into errors
        compilerArgs << '-Xdiags:verbose'   // Turn on verbose
        deprecation = true
        encoding = 'UTF-8'
        // incremental = true // https://code.google.com/p/android/issues/detail?id=82411
    }
}

/*
 * JUnit(3.8.x or 4.x)の設定.
 *   see: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
 * 
 * テストFail時のログ出力設定.
 *   see: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
 */
tasks.withType(Test) {
    testLogging {
        // Test実行時のログ設定.
        exceptionFormat 'full'    // Full display of exceptions. (or 'short')
        showCauses true           // テストFailの内容は全て出力する
        showExceptions true
        showStackTraces true
        showStandardStreams true  // テストの結果はStdOutへ出力 
    }
}

/*
 * Javadocの設定.
 *   see: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
 *  
 * Javadocオプション.
 *   see: https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
 */
tasks.withType(Javadoc) {
    configure(options) {
        header = name
        author = true
        links(['http://docs.oracle.com/javase/8/docs/api/',
               'http://docs.oracle.com/javase/7/docs/api/'] as String[])
        linksOffline 'http://d.android.com/reference',
                "${android.sdkDirectory}/docs/reference"
        exclude '**/BuildConfig.java', '**/R.java'
        if (JavaVersion.current().isJava8Compatible()) {
            addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

/*
 * -------------------------------------------------------------------
 *   Androidプロジェクト共通設定
 * -------------------------------------------------------------------
 */

apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

// Androidビルド設定
//   see: http://google.github.io/android-gradle-dsl/
android {
    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion

    compileOptions {
        encoding "UTF-8"

        // sourceCompatibilityとtargetCompatibilityは同じVersionとすること.
        // AndroidでJava7構文を使用するには下記の制約がつく.
        //   - Try-with-resources構文: minSdkVersion >= 19
        //   - その他の構文(multi-catch, diamond operator): minSdkVersion >= 8
        //   - BuildToolsVersion >= 19
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // APK署名設定.
    //   see: http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Signing-Configurations
    //   see: http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.SigningConfig.html
    //   see: http://developer.android.com/intl/ja/tools/publishing/app-signing.html
    signingConfigs {
        debug {
            // FIXME: デバッグ用署名はプロジェクトルート配下に以下の内容で設置する
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // FIXME: プロダクト用署名の設定を環境変数(gradle.properties)に定義する
            storeFile file(System.properties["KEYSTORE_FILE"])
            storePassword System.properties["KEYSTORE_PASSWORD"]
            keyAlias System.properties["KEY_ALIAS"]
            keyPassword System.properties["KEY_PASSWORD"]
        }
    }

    // ビルド種別毎の設定
    //   see: http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html
    //   see: http://tools.android.com/tech-docs/new-build-system/resource-shrinking
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false    // ビルド高速化のためシュリンク処理はスキップする.
            shrinkResources false  // 同上
            proguardFiles(
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro')
            testCoverageEnabled true
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true    // Code shrink
            shrinkResources true  // Resource shrink
            proguardFiles(
                    getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro')
            testCoverageEnabled false
            signingConfig signingConfigs.debug  // FIXME: 商用KeyStoreに置き換えること
        }
    }

    // テスト実行設定
    //   see: http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.TestOptions.html
    //   see: http://tools.android.com/tech-docs/unit-testing-support
    testOptions {
        unitTests.all {
            jvmArgs '-XX:MaxPermSize=256m'  // All the usual Gradle options.
            jvmArgs '-noverify'             // JSR-202.
        }

        unitTests.returnDefaultValues = true
    }

    // DEXプロセスのオプション
    //   see: http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html
    dexOptions {
        // CIサーバでは常にCleanBuildになるため ./gradlew clean assemble -PdisablePreDex で実行すれば高速化できる
        //   see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.
        preDexLibraries = !project.hasProperty('disablePreDex')

        // FIXME: メモリが十分にあるならこれらのコメントアウトを外す
        // dexInProcess = true   // 同プロセスでDEXコンパイルすることによるビルド高速化
        // javaMaxHeapSize "4g"  // DEXコンパイルで必要なJavaヒープの確保
    }

    // Lintの設定
    //   Lint設定ファイルはプロジェクトルートのconfigフォルダに配置すること.
    //   see: http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html
    lintOptions {
        textReport true                         // ビルドアウトプットコンソールにLint結果を出力する
        textOutput 'stdout'
        checkAllWarnings true
        warningsAsErrors true                   // Warnレベルの警告をErrorと同様に扱う
        abortOnError true                       // Errorが見つかった場合にビルドを失敗させる
        lintConfig rootProject.file('config/lint.xml') // Lintチェックの無効化設定.
    }

    // DexCountの設定
    //   see: https://github.com/KeepSafe/dexcount-gradle-plugin
    dexcount {
        format = "list"
        includeClasses = false
        includeFieldCount = true
        includeTotalMethodCount = false
        orderByMethodCount = false
        verbose = true
    }

    packagingOptions {
        // 外部ライブラリを取り込み, パッケージ化する際の競合を解消する設定
        exclude '.readme'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/.readme'
        exclude 'META-INF/readme.txt'
        exclude 'META-INF/README.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    /*
     * 全ビルドバリアントに共通のタスクを設定する
     */
    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->

        def variantName = variant.name.capitalize()

        // 自動生成ファイルは静的解析チェックの対象外とする.
        def autoGenerated = ['**/R.class',
                             '**/R$*.class',
                             '**/Manifest*.*',
                             'android/**/*.*',
                             '**/BuildConfig.*',
                             // ButterKnife
                             '**/*$ViewBinder*.*',
                             '**/*$ViewInjector*.*',
                             // Dagger2
                             '**/Dagger*.*',
                             '**/*_Provide*Factory.class.*',
                             // Orma
                             '**/*_Deleter.class',
                             '**/*_Relation.class',
                             '**/*_Selector.class',
                             '**/*_Updater.class',
                             '**/*_Schema.class',
                             '**/*_Schema$*.class',
                             '**/OrmaDatabase.class',
                             '**/OrmaDatabase$Builder.class',
        ]

        variant.assemble.dependsOn "lint$variantName"  // 全ビルドバリアントでLintを必須化

        /*
         * PMD
         *   see: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
         */
        task("pmd$variantName", type: Pmd, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Pmd reports."

            ignoreFailures = true
            reports {
                xml.enabled = true
                html.enabled = true
            }

            ruleSetFiles = files("${rootProject.rootDir}/config/pmd.xml")
            ruleSets = []
            source = files(android.sourceSets.main.java.srcDirs)
            classpath = files(configurations.compile.files)
        }

        /*
         * Jacoco
         *   see: https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.tasks.JacocoReport.html
         */
        task("jacoco${variantName}Report", type: JacocoReport,
                dependsOn: "test${variantName}UnitTest") {
            group 'Reporting'
            description "Generate ${variantName} Jacoco coverage reports."

            reports {
                xml.enabled = true
                html.enabled = true
            }

            sourceDirectories = files(android.sourceSets.main.java.srcDirs)
            executionData =
                    files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
            classDirectories =
                    fileTree(dir: android.sourceSets.main.java.srcDirs,
                            excludes: autoGenerated)
        }

        /*
         * Findbugs
         *   see: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
         */
        task("findbugs$variantName", type: FindBugs,
                dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Findbugs reports."

            ignoreFailures = true
            reports {
                xml.enabled = false
                html.enabled = true
            }

            effort = 'max'
            reportLevel = 'low'
            source = files(android.sourceSets.main.java.srcDirs)
            classes = fileTree(dir: "$project.buildDir/intermediates/classes",
                    excludes: autoGenerated)
            classpath = files(configurations.compile.files)
            excludeFilter = rootProject.file('config/findbugs.xml')
        }

        /*
         * CheckStyle
         *   see: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
         */
        task("checkstyle$variantName", type: Checkstyle,
                dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Checkstyle reports."

            showViolations true  // CheckStyle解析結果をStdOutに出力する
            ignoreFailures = true

            reports.xml.enabled = true
            reports.html.enabled = true

            configFile = rootProject.file('config/checkstyle-hard.xml')
            source = files(android.sourceSets.main.java.srcDirs)
            classpath = files(configurations.compile.files)
        }
    }
}

dependencies {
    // https://github.com/jacoco/jacoco/issues/288
    androidJacocoAgent 'org.jacoco:org.jacoco.agent:0.7.2.201409121644'

    // https://github.com/jacoco/jacoco/issues/288
    androidJacocoAnt 'org.jacoco:org.jacoco.agent:0.7.2.201409121644'

    checkstyle 'com.puppycrawl.tools:checkstyle:6.14.1'

    findbugs 'com.google.code.findbugs:findbugs:3.0.1'

    // https://github.com/jacoco/jacoco/issues/288
    jacocoAgent 'org.jacoco:org.jacoco.agent:0.7.2.201409121644'

    // https://github.com/jacoco/jacoco/issues/288
    jacocoAnt 'org.jacoco:org.jacoco.ant:0.7.2.201409121644'

    pmd 'net.sourceforge.pmd:pmd-java:5.4.1'
}

/*
 * -------------------------------------------------------------------
 *   ユーティリティ
 * -------------------------------------------------------------------
 */

// プロジェクトのCode Style設定ファイルのダウンロードスクリプトを実行する.
task pullCodeStyleSettings(type: Exec) {
    group 'Other'
    description "Download and Settings code style."

    workingDir './'
    executable "./script/pullCodeStyleSettings.sh"
}

/*
 * その他導入済みプラグイン
 * 
 *   - DependencyUpdates: 使用しているライブラリの最新バージョンチェック
 *       $ ./gradlew dependencyUpdates
 * 
 *   - ApkSize: APKのサイズを出力する
 *       $ ./gradlew assembleDebug
 *         output:
 *           "Total APK Size in app-dev-debug in bytes: XXXX"
 *           (and reported to outputs/apksize/*.cvs)
 * 
 *   - DexCount: メソッド数を出力する
 *       $ ./gradlew assembleDebug
 *         output:
 *           "Total methods in app-dev-debug.apk: XXXX"
 *           "Total fields in app-dev-debug.apk: XXXX"
 *           (and reported to outputs/dexcount/*.txt)
 */