apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

apply plugin: 'com.jakewharton.hugo'  // generic method io logger
apply plugin: 'com.fernandocejas.frodo'  // ReactiveX observable logger

apply plugin: 'net.ltgt.errorprone'
apply plugin: 'com.github.ben-manes.versions'

apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'


tasks.withType(JavaCompile) {
    configure(options) {
//        compilerArgs << '-Xlint:all'        // Turn on all warnings
//        compilerArgs << '-Xlint:-options'   // Turn off 'missing' bootclasspath warning
//        compilerArgs << '-Xlint:-path'      // Turn off アーカイブ・ファイルの予期しない拡張子(aar)
//        compilerArgs << '-Werror'           // Turn warnings into errors
        compilerArgs << '-Xdiags:verbose'   // Turn on verbose
        deprecation = true
        encoding = 'UTF-8'
        // incremental = true // https://code.google.com/p/android/issues/detail?id=82411
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
}

tasks.withType(JavaForkOptions) {
    // Prevent forked processes from stealing focus (on MacOS at least)
    jvmArgs '-Djava.awt.headless=true'
}

tasks.withType(Javadoc) {
    configure(options) {
        header = name
        author = true
        links(['http://docs.oracle.com/javase/8/docs/api/',
               'http://docs.oracle.com/javase/7/docs/api/'] as String[])
        linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
        exclude '**/BuildConfig.java', '**/R.java'
        if (JavaVersion.current().isJava8Compatible()) {
            addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

android {
    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "yuki.android.ormasample"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    productFlavors {
        // Define separate dev and prod product flavors.
        // http://developer.android.com/intl/ja/tools/building/multidex.html#dev-build
        dev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        pro {
            // The actual minSdkVersion for the application.
            minSdkVersion rootProject.ext.minSdkVersion
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        textReport true
        textOutput 'stdout'
        checkAllWarnings true
        warningsAsErrors false
        abortOnError true  // Keep clean.
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    // JSR-202. ユニットテストに限りclassファイル(バイトコード)検証をOFFする
    testOptions.unitTests.all {
        jvmArgs '-noverify' // Flurry SDK
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    // ビルド高速化
    // DEXプロセスを分離プロセスではなく, 同Gradleプロセス上で実施することでビルドを高速化する.
    // 副作用としてJVMのメモリを大量に消費するため, メモリ確保ができない場合はこれをコメントアウトすること. 
    // http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9
    dexOptions {
        // DexOptions API: http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html
        // javaMaxHeapSize "4g"
        dexInProcess = false
    }

    // ライブラリ間の依存性解決 
    // https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/user-guide#TOC-Resolving-conflicts-between-main-and-test-APK
    // 
    // configurations.allはcode inspectionが報告されるため下記のコメントをつける. 
    // see https://youtrack.jetbrains.com/issue/IDEA-141744
    // noinspection GroovyAssignabilityCheck
    configurations.all {
        resolutionStrategy.force "com.android.support:support-annotations:${supportPackageVersion}"
    }

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->
        def variantName = variant.name.capitalize()
        def autoGenerated = ['**/R.class',
                             '**/R$*.class',
                             '**/Manifest*.*',
                             'android/**/*.*',
                             '**/BuildConfig.*',
                             '**/*$ViewBinder*.*',
                             '**/*$ViewInjector*.*']

        // Run lint on each build
        variant.assemble.dependsOn "lint$variantName"

        task("pmd$variantName", type: Pmd, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Pmd reports."

            ignoreFailures = true
            reports {
                xml.enabled = true
                html.enabled = true
            }

            source = files(variant.javaCompiler.source)
            classpath = files(configurations.compile.files)
        }

        task("jacoco${variantName}Report", type: JacocoReport,
                dependsOn: "test${variantName}UnitTest") {
            group 'Reporting'
            description "Generate ${variantName} Jacoco coverage reports."

            reports {
                xml.enabled = true
                html.enabled = true
            }

            // variant.javaCompile.source does not work
            // traverses from starting point
            sourceDirectories = files(android.sourceSets.main.java.srcDirs)
            executionData = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
            classDirectories = fileTree(dir: variant.javaCompiler.destinationDir,
                    excludes: autoGenerated)
        }

        task("findbugs$variantName", type: FindBugs, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Findbugs reports."

            ignoreFailures = true
            reports {
                xml.enabled = false
                html.enabled = true
            }

            effort = 'max'
            reportLevel = 'low'
            source = files(variant.javaCompiler.source)
            classpath = files(configurations.compile.files)
            classes = fileTree(dir: variant.javaCompile.destinationDir,
                    excludes: autoGenerated)
        }

        task("checkstyle$variantName", type: Checkstyle, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Checkstyle reports."

            ignoreFailures = true
            // TODO generate HTML, 'reports.html' is not available
            reports.xml.enabled = true

            configFile = rootProject.file('gradle/checkstyle-hard.xml')
            source = files(android.sourceSets.main.java.srcDirs)
            classpath = files(configurations.compile.files)
        }
    }
}

//noinspection GroovyAssignabilityCheck
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Support lib.
    compile "com.android.support:appcompat-v7:${supportPackageVersion}"
    compile "com.android.support:design:${supportPackageVersion}"
    compile "com.android.support:support-annotations:${supportPackageVersion}"

    // apt.
    provided 'javax.annotation:javax.annotation-api:1.2'

    // Debugger
    debugCompile 'com.facebook.stetho:stetho:1.3.0'
    // Only the main stetho dependency is strictly required,
    // however you may also wish to use one of the network helpers:
    compile 'com.facebook.stetho:stetho-okhttp:1.3.0'

    // ReactiveX.
    compile 'io.reactivex:rxandroid:1.1.0'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.0'

    // Logger
    compile 'com.jakewharton.timber:timber:4.1.0'

    // DI. Dagger2
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    compile 'com.google.dagger:dagger:2.0.2'

    // View bind. ButterKnife
    compile 'com.jakewharton:butterknife:7.0.1'

    // ORM. Orma
    apt 'com.github.gfx.android.orma:orma-processor:1.1.2'
    compile 'com.github.gfx.android.orma:orma:1.1.2'

    // JUnit
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    // Unit testing. Robolectric
    testCompile "org.robolectric:robolectric:3.0"

    // android Testing support lib.
    androidTestCompile "com.android.support.test:runner:${testingSupportPackageVersion}"
    androidTestCompile "com.android.support.test:rules:${testingSupportPackageVersion}"
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'

    androidJacocoAgent 'org.jacoco:org.jacoco.agent:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    androidJacocoAnt 'org.jacoco:org.jacoco.agent:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    checkstyle 'com.puppycrawl.tools:checkstyle:6.14.1'
    errorprone 'com.google.errorprone:error_prone_core:2.0.7'
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    jacocoAgent 'org.jacoco:org.jacoco.agent:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    jacocoAnt 'org.jacoco:org.jacoco.ant:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    pmd 'net.sourceforge.pmd:pmd-java:5.4.1'
}

// メソッドのIOをロギングするHugoライブラリをdebugビルドでもOFFにしたい場合は
// 下記のコメントアウトを外す. https://github.com/JakeWharton/hugo
//hugo {
//    enabled false
//}