// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' } // official gradle plugins
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0-beta2'

        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'

        // Generic logger
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'

        // RxJava observable logger
        classpath "com.fernandocejas.frodo:frodo-plugin:0.8.2"

        // google error-prone
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.8'

        // dex method count
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.3.1'

        // apk size
        classpath 'com.vanniktech:gradle-android-apk-size-plugin:0.1.2'
        
        // check for plugin updates
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}

configure(project('app')) {
    apply plugin: 'com.android.application'
    apply plugin: 'com.getkeepsafe.dexcount'
    apply plugin: 'com.vanniktech.android.apk.size'
    // apply from: rootProject.file('common.gradle') 別ファイル読み込み

//    signingConfigs.debug {
//        storeFile rootProject.file('debug.keystore')
//        storePassword 'android'
//        keyAlias 'androiddebugkey'
//        keyPassword 'android'
//    }

//    buildTypes.release {
//        minifyEnabled false
//        proguardFiles(getDefaultProguardFile('proguard-android-optimize.txt'),
//                'proguard-rules.pro')
//        signingConfig signingConfigs.debug
//    }
}

allprojects {
    repositories {
        jcenter()
    }

    // ビルド高速化
    // CIサーバでは常にCleanな状態からビルドが実施されるため, 2回目以降のビルドを高速化する
    // PreDexLibraryのプロセスに意味がない. 下記はCIサーバでPreDexLibraryを無効にする.
    // see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}

// http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html
project.ext {
    compileSdkVersion = 23
    minSdkVersion = 15
    targetSdkVersion = 23
    buildToolsVersion = '23.0.2'

    // ビルド高速化
    // CIサーバでは常にCleanな状態からビルドが実施されるため, 2回目以降のビルドを高速化する
    // PreDexLibraryのプロセスに意味がない. 
    // CIサーバでビルドを行う際には -PdisablePreDex 引数をつけることでPreDexLibraryをskipできる. 
    // see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.
    preDexLibs = !project.hasProperty('disablePreDex')

    supportPackageVersion = '23.1.1'
    testingSupportPackageVersion = '0.4'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// プロジェクトのJava code style用設定ファイルをダウンロードする. 
// AndroidStudioのCodeStyle設定ファイルをGitHubからDLするスクリプトを実行する.
task fetchCodeStyle(type: Exec) {
    workingDir './'
    executable "./script/attachCodeStyle.sh"
}